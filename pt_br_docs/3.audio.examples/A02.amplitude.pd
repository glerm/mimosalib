#N canvas 73 190 706 516 12;
#X obj 64 65 osc~ 440;
#X obj 64 283 dac~;
#X msg 431 7 \; pd dsp 1;
#X msg 514 7 \; pd dsp 0;
#X obj 64 202 *~ 0;
#X floatatom 107 165 0 0 0 0 - - -;
#X obj 95 132 dbtorms;
#X floatatom 95 100 0 0 80 0 - - -;
#X text 440 486 updated for Pd version 0.33;
#X text 164 18 CONTROLANDO AMPLITUDE;
#X text 447 43 LIGA;
#X text 523 43 DESLIGA;
#X text 145 66 <-- onda senoidal a 440 Hz. e amplitude maxima;
#X text 141 100 <-- coloque amplitude aqui em decibeis;
#X text 211 133 <-- isto converte dB para uma unidade linear;
#X text 210 164 <-- isto exibe o ganho linear;
#X text 117 204 <-- Multiplica a onda de som pelo ganho \, reduzindo
sua amplitude. Voce pode tambem usar o objeto "*~" para multiplicar
dois sinais. O argumento "0" aqui instrui que nos vamos futuramente
enviar mensagens para configurar o multiplicador.;
#X text 113 286 <-- E a saida. Estamos mandando para ambos os canais
agora.;
#X text 35 327 Amplitudes de sinais de audio podem ter qualquer faixa
razoavel \, mas quando voce joga um sinal pelo objeto dac~ \, os samples
devem estar numa faixa de -1 a +1. Valores fora desta faixa serao "clipados".
;
#X text 35 396 Aqui nos calculamos um ganho para o multiplicador (*~)
usando um objeto "dbtorms" ("dB to RMS"). 100dB e' normalizado para
1 \, e zero dB artificialmente joga um 0;
#X text 34 452 Pd assume que o seu sistema de audio tem dois canais
de saida a nao ser que voce especifique outro valor.;
#X connect 0 0 4 0;
#X connect 4 0 1 0;
#X connect 4 0 1 1;
#X connect 6 0 4 1;
#X connect 6 0 5 0;
#X connect 7 0 6 0;
